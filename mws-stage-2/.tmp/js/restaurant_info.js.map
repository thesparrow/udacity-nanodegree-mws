{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","error","console","self","off","remove","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","getElementById","innerHTML","name","address","image","className","setAttribute","src","imageUrlForRestaurant","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","noReviews","ul","forEach","review","createReviewHTML","li","reviewHeader","date","rating","comments","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener(\"DOMContentLoaded\", event => {\n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\ninitMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      if (self.newMap) {\n        self.newMap.off();\n        self.newMap.remove();\n      }\n\n      self.newMap = L.map(\"map\", {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer(\n        \"https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken\" +\n          \"}\",\n        {\n          mapboxToken:\n            \"pk.eyJ1Ijoic2xwMTk5MyIsImEiOiJjampic2MxMTAxdjZyM2t0ZWh1dGpudjhnIn0.DkZx-BtdpEHfi\" +\n            \"X6HM5S33g\",\n          maxZoom: 18,\n          attribution:\n            'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contr' +\n            'ibutors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>,' +\n            ' Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n          id: \"mapbox.streets\"\n        }\n      ).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = callback => {\n  if (self.restaurant) {\n    // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getParameterByName(\"id\");\n  if (!id) {\n    // no id found in URL\n    error = \"No restaurant id in URL\";\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById(\"restaurant-name\");\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById(\"restaurant-address\");\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById(\"restaurant-img\");\n  image.className = \"restaurant-img\";\n  image.setAttribute(\"alt\", restaurant.name);\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const cuisine = document.getElementById(\"restaurant-cuisine\");\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (\n  operatingHours = self.restaurant.operating_hours\n) => {\n  const hours = document.getElementById(\"restaurant-hours\");\n  hours.innerHTML = \"\";\n  for (let key in operatingHours) {\n    const row = document.createElement(\"tr\");\n\n    const day = document.createElement(\"td\");\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement(\"td\");\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById(\"reviews-container\");\n  const title = document.getElementById(\"reviews-title\");\n  title.innerHTML = \"Reviews\";\n\n  if (!reviews) {\n    const noReviews = document.createElement(\"p\");\n    noReviews.innerHTML = \"No reviews yet!\";\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById(\"reviews-list\");\n  ul.innerHTML = \"\";\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = review => {\n  const li = document.createElement(\"li\");\n\n  const reviewHeader = document.createElement(\"div\");\n  reviewHeader.setAttribute(\"class\", \"review-header\");\n\n  const name = document.createElement(\"p\");\n  name.innerHTML = review.name;\n  reviewHeader.appendChild(name);\n\n  const date = document.createElement(\"p\");\n  date.innerHTML = review.date;\n  reviewHeader.appendChild(date);\n  li.appendChild(reviewHeader);\n\n  const rating = document.createElement(\"p\");\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement(\"p\");\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const restaurantNav = document.getElementById(\"restaurant-label\");\n  restaurantNav.innerHTML = restaurant.name;\n};\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url) url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return \"\";\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n};\n"]}