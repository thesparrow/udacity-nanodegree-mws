const RESTAURANTS="restaurants";class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fetchRestaurants(e){showCachedMessages(e).then(()=>{fetch(this.DATABASE_URL).then(t=>{200===t.status?t.json().then(t=>{updateCache(t),e(null,t)}).catch(t=>e(t,null)):e("API call failed",null)}).catch(t=>e(t,null))})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,a)=>{if(n)t(n,null);else{const n=a.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((a,l)=>{if(a)n(a,null);else{let a=l;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),n(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),a=t.filter((e,n)=>t.indexOf(e)==n);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),a=t.filter((e,n)=>t.indexOf(e)==n);e(null,a)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){let t=`/img/${e.photograph?e.photograph:"default"}`,n="_2x.";return window&&(n=window.innerWidth<500?"_1x.":"_2x."),t+n+"jpg"}static mapMarkerForRestaurant(e,t){const n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return n.addTo(newMap),n}}updateCache=(e=>{e||console.log("No data to update!"),getDBPromise().then(t=>{let n=t.transaction(RESTAURANTS,"readwrite").objectStore(RESTAURANTS);e.map(e=>n.put(e)),n.index("updatedAt").openCursor(null,"prev").then(e=>{if(e)return e.advance(30)}).then(function e(t){if(t)return console.log("Delete data",t),t.delete(),t.continue().then(e)})})}),getDBPromise=(()=>navigator.serviceWorker&&"indexedDB"in window?idb.open("restaurants-db",5,e=>{e.createObjectStore(RESTAURANTS,{keyPath:"id"}).createIndex("updatedAt","updatedAt")}):Promise.resolve()),showCachedMessages=(e=>getDBPromise().then(t=>{return t.transaction(RESTAURANTS).objectStore(RESTAURANTS).index("updatedAt").getAll().then(t=>{t&&t.length>0&&e(null,t)})}));
//# sourceMappingURL=dbhelper.js.map
