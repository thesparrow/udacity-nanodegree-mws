{"version":3,"sources":["main.js"],"names":["newMap","observer","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","lazyLoading","DBHelper","error","neighborhoods","console","warn","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","cuisines","fillCuisinesHTML","cuisine","L","map","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","restaurants","log","resetRestaurants","fillRestaurantsHTML","marker","remove","ul","restaurant","observe","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","setAttribute","name","address","more","href","urlForRestaurant","mapMarkerForRestaurant","on","window","location","options","url","push","lozad","threshold"],"mappings":"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","file":"main.js","sourcesContent":["// let restaurants,\n//   neighborhoods,\n//   cuisines\nvar newMap;\nvar markers = [];\nvar observer;\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener(\"DOMContentLoaded\", event => {\n  initMap(); // added\n  fetchNeighborhoods();\n  fetchCuisines();\n  lazyLoading();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nfetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) {\n      // Got an error\n      console.warn(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById(\"neighborhoods-select\");\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement(\"option\");\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nfetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) {\n      // Got an error!\n      console.warn(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById(\"cuisines-select\");\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement(\"option\");\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize leaflet map, called from HTML.\n */\ninitMap = () => {\n  self.newMap = L.map(\"map\", {\n    center: [40.722216, -73.987501],\n    zoom: 12,\n    scrollWheelZoom: false\n  });\n  L.tileLayer(\n    \"https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken\" +\n      \"}\",\n    {\n      mapboxToken:\n        \"pk.eyJ1Ijoic2xwMTk5MyIsImEiOiJjampic2MxMTAxdjZyM2t0ZWh1dGpudjhnIn0.DkZx-BtdpEHfi\" +\n        \"X6HM5S33g\",\n      maxZoom: 18,\n      attribution:\n        'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contr' +\n        'ibutors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>,' +\n        ' Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n      id: \"mapbox.streets\"\n    }\n  ).addTo(newMap);\n\n  updateRestaurants();\n};\n\n/**\n * Update page and map for current restaurants.\n */\nupdateRestaurants = () => {\n  const cSelect = document.getElementById(\"cuisines-select\");\n  const nSelect = document.getElementById(\"neighborhoods-select\");\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(\n    cuisine,\n    neighborhood,\n    (error, restaurants) => {\n      if (error) {\n        // Got an error!\n        console.log(error);\n      } else {\n        resetRestaurants(restaurants);\n        fillRestaurantsHTML();\n      }\n    }\n  );\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nresetRestaurants = restaurants => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById(\"restaurants-list\");\n  ul.innerHTML = \"\";\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById(\"restaurants-list\");\n  restaurants.forEach(restaurant => {\n    observer.observe();\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n};\n\n/**\n * Create restaurant HTML.\n */\ncreateRestaurantHTML = restaurant => {\n  const li = document.createElement(\"li\");\n\n  const image = document.createElement(\"img\");\n  image.className = \"restaurant-img\";\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.setAttribute(\"alt\", restaurant.name);\n  image.setAttribute(\"class\", \"lozad\");\n  li.append(image);\n\n  const name = document.createElement(\"h2\");\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement(\"p\");\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement(\"p\");\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement(\"a\");\n  more.innerHTML = \"View Details\";\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  more.setAttribute(\"role\", \"button\");\n  li.append(more);\n\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on(\"click\", onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n};\n\nlazyLoading = () => {\n  observer = lozad(\".lozad\", {\n    threshold: 0.1\n  });\n  observer.observe();\n};\n"]}